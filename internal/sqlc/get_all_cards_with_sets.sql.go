// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_all_cards_with_sets.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllCardsWithSets = `-- name: GetAllCardsWithSets :many
SELECT
    c.scryfall_id, c.set_id, c.name, c.collector_number, c.color_identity, c.colors, c.language_code, c.spanish_name, c.rarity, c.type_line, c.scryfall_api_uri, c.scryfall_web_uri, c.scryfall_oracle_id, c.created_at, c.updated_at,
    s.code set_code,
    s.name set_name
FROM
    cards c
INNER JOIN sets s ON c.set_id = s.scryfall_id
ORDER BY set_code, set_name ASC
`

type GetAllCardsWithSetsRow struct {
	ScryfallID       pgtype.UUID
	SetID            pgtype.UUID
	Name             string
	CollectorNumber  string
	ColorIdentity    pgtype.Text
	Colors           pgtype.Text
	LanguageCode     string
	SpanishName      pgtype.Text
	Rarity           pgtype.Text
	TypeLine         string
	ScryfallApiUri   string
	ScryfallWebUri   string
	ScryfallOracleID pgtype.UUID
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	SetCode          string
	SetName          string
}

func (q *Queries) GetAllCardsWithSets(ctx context.Context) ([]GetAllCardsWithSetsRow, error) {
	rows, err := q.db.Query(ctx, getAllCardsWithSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCardsWithSetsRow
	for rows.Next() {
		var i GetAllCardsWithSetsRow
		if err := rows.Scan(
			&i.ScryfallID,
			&i.SetID,
			&i.Name,
			&i.CollectorNumber,
			&i.ColorIdentity,
			&i.Colors,
			&i.LanguageCode,
			&i.SpanishName,
			&i.Rarity,
			&i.TypeLine,
			&i.ScryfallApiUri,
			&i.ScryfallWebUri,
			&i.ScryfallOracleID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SetCode,
			&i.SetName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
